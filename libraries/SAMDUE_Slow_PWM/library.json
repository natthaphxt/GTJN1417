{
  "name": "SAMDUE_Slow_PWM",
  "version": "1.2.2",
  "keywords": "timer, interrupt, hardware, isr, isr-based, pwm, isr-based-pwm, timing, control, device, hardware-timer, mission-critical, accuracy, precise, sam, due, sam-due, sam3x8e, atmel-sam",
  "description": "This library enables you to use ISR-based PWM channels on an Arduino SAM_DUE board to create and output PWM any GPIO pin. It now supports 16 ISR-based PWM channels, while consuming only 1 Hardware Timer. PWM channel interval can be very long (ulong microsecs / millisecs). The most important feature is they're ISR-based PWM channels, supporting lower PWM frequencies with suitable accuracy. Their executions are not blocked by bad-behaving functions or tasks. This important feature is absolutely necessary for mission-critical tasks. These ISR-based PWMs, still work even if other software functions are blocking. Moreover, they are much more precise (certainly depending on clock frequency accuracy) than other software-based PWM using millis() or micros(). That's necessary if you need to control devices requiring high precision. Now you can change the PWM settings on-the-fly",
  "authors":
  {
    "name":  "Khoi Hoang",
    "url":   "https://github.com/khoih-prog",
    "maintainer": true
  },  
  "repository":
  {
    "type": "git",
    "url": "https://github.com/khoih-prog/SAMDUE_Slow_PWM"
  },
  "homepage": "https://github.com/khoih-prog/SAMDUE_Slow_PWM",
  "export": {
    "exclude": [
      "linux",
      "extras",
      "tests"
    ]
  },
  "license": "MIT",
  "frameworks": "arduino",
  "platforms": ["atmelsam"],
  "examples": "examples/*/*/*.ino",
  "headers": ["SAMDUE_Slow_PWM.h", "SAMDUE_Slow_PWM.hpp"]
}
